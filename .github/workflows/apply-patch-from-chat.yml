name: Apply Patch From Chat

on:
  workflow_dispatch:
    inputs:
      patch_b64:
        description: Base64-encoded unified diff (use this OR patch_url)
        required: false
      patch_url:
        description: URL to a raw .diff/.patch file (use this OR patch_b64)
        required: false
      branch:
        description: Branch name to create/update
        required: false
        default: chat-patch
      commit_message:
        description: Commit message
        required: false
        default: Apply patch from chat
      pr_title:
        description: Pull Request title
        required: false
        default: Patch from ChatGPT
      pr_body:
        description: Pull Request body
        required: false
        default: Automated patch from chat

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: apply-patch-from-chat
  cancel-in-progress: false

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Obtain patch (URL or Base64; tolerant decode)
        id: obtain
        shell: bash
        env:
          PATCH_URL: ${{ github.event.inputs.patch_url }}
          PATCH_B64: ${{ github.event.inputs.patch_b64 }}
        run: |
          set -euo pipefail
          if [[ -n "${PATCH_URL}" ]]; then
            echo "Downloading patch from: ${PATCH_URL}"
            curl -fsSL "${PATCH_URL}" -o /tmp/patch.diff
          elif [[ -n "${PATCH_B64}" ]]; then
            echo "Decoding base64 patch (tolerant)…"
            # Strip anything that's not valid base64 and remove newlines before decoding
            printf "%s" "${PATCH_B64}" \
              | tr -d '\r\n' \
              | sed 's/[^A-Za-z0-9+\/=]//g' \
              | base64 -d > /tmp/patch.diff
          else
            echo "ERROR: Provide either patch_url or patch_b64" >&2
            exit 1
          fi

          echo "Patch size: $(wc -c </tmp/patch.diff) bytes"
          echo "::group::Patch preview (first 200 lines)"
          head -n 200 /tmp/patch.diff || true
          echo "::endgroup::"

      - name: Create/checkout branch
        shell: bash
        env:
          BRANCH: ${{ github.event.inputs.branch }}
        run: |
          set -euo pipefail
          git checkout -B "${BRANCH}"

      - name: Apply patch
        shell: bash
        run: |
          set -euo pipefail
          if git apply --whitespace=fix --reject /tmp/patch.diff; then
            echo "Applied with git apply"
          else
            echo "git apply failed; attempting 'git am' (mbox format)…"
            git am /tmp/patch.diff
          fi

      - name: Show rejects (if any)
        if: ${{ failure() }}
        shell: bash
        run: |
          echo "::group::Rejects (*.rej)"
          find . -type f -name "*.rej" -print -exec sed -n '1,160p' {} \; || true
          echo "::endgroup::"

      - name: Commit changes (for git apply path)
        shell: bash
        env:
          COMMIT_MESSAGE: ${{ github.event.inputs.commit_message }}
        run: |
          set -euo pipefail
          git add -A || true
          if ! git diff --cached --quiet; then
            git commit -m "${COMMIT_MESSAGE}"
          else
            echo "Nothing to commit (either 'git am' already committed or no changes)."
          fi

      - name: Push branch
        shell: bash
        env:
          BRANCH: ${{ github.event.inputs.branch }}
        run: |
          set -euo pipefail
          git push --set-upstream origin "${BRANCH}"

      - name: Open Pull Request
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ github.event.inputs.branch }}
          PR_TITLE: ${{ github.event.inputs.pr_title }}
          PR_BODY: ${{ github.event.inputs.pr_body }}
          BASE: ${{ github.ref_name }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const head = process.env.BRANCH || 'chat-patch';
            const base = process.env.BASE || 'main';
            const title = process.env.PR_TITLE || 'Patch from ChatGPT';
            const body = process.env.PR_BODY || 'Automated patch from chat';

            try {
              const { data } = await github.rest.pulls.create({ owner, repo, title, head, base, body });
              core.info(`PR created: ${data.html_url}`);
            } catch (e) {
              if (e.status === 422) {
                const { data: prs } = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${head}` });
                if (prs.length) {
                  core.info(`Existing PR: ${prs[0].html_url}`);
                } else {
                  throw e;
                }
              } else {
                throw e;
              }
            }
